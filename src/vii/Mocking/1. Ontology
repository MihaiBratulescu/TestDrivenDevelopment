Test double <- Dummy <- Stub <- Spy <- Mock
            <- Fake

1. The dummy
    - implements an interface
    - all functions do nothing
    - all functions returns values as close to nothing as possible
    - used when you test an execution path that does NOT care about the interface
    but calls the interface overall

2. Stub
    - does not return 0 or null
    - returns value(s) required by the test
    - returns special fixed values
    - used to drive the code through special execution paths
    - reused by multiple tests (like a fixture context)
    - used to navigate if/while/for statements
    - ex: RevokingValidatorStub, UserNotFoundStub, AcceptingLoginStub

3. Spy
    - remembers the way it was called
    - used to test external services (check if it was called correctly)
    - tests interaction
    - couples tests to the algorithm!

    public abstract class ExcelCell
    {
        public abstract void Write(int row,
            int col, object value);
    }

    public class ExcellCellSpy extends ExcelCell
    {
        private List<String> calls = new List<string>();

        public override void Write(int row, int col, object value)
        {
            calls.Add($"{row} {col} = {value}");
            "1 2 = Aladin", "3 5 = Bau bau";
        }
    }

4. True Mock
    - it knows what should happen (analyses what it spied and rapports)
    - remembers in it's internal state what was supposed to happen
    - instead of looking at recorded call the true mock can compute the expected result
    - basically it's checking on what it spied
    - give the useful advantage of having the recording and
    the computing in the same place

5. Fake
    - is a simulator
    - contains real logic
    - kind of looks like the real deal
    - get's complicated super fast
    - easy to loose control of them
    - require their own tests